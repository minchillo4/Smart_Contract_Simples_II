// SPDX-License-Identifier: MIT
pragma solidity ^0.8.8; // declaring solidity version

contract SimpleStorage {              
    // boolean, uint(whole number +), int(whole number + or -), address, bytes


    //initialize variable to zero

    uint256 public favoriteNumber;

    People public person = People({
        name: "Lucas",
        favoriteNumber: 2
    });

    People[] public people; 

   

    struct People {
        string name; 
        uint256 favoriteNumber;
    }

    function store(uint256 _favoriteNumber) public {
        favoriteNumber = _favoriteNumber;
    }
    
    function retrieve() public view returns(uint256) { // view and pure functions doesnt spend gas,  
        return favoriteNumber;
    }


    function retrieveChange() public pure returns(uint256) { //pure function doesnt changes the state of the blockchain
        return (4 + 4);
    }

    function addPerson (string memory _name, uint256 _favoriteNumber) public {
        people.push(People(_name, _favoriteNumber));
    }




}

// visibility

// // public: visible internally and externally (creates a getter function)
// private: only visibile in the current contract
// external: only people outside the contract can call the getter function
// internal: only can be called by the contract is deploy or derived contracts
